using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Web.Mvc;
using Business.PanGu;
using Myzj.OPC.UI.Common;
using Myzj.OPC.UI.Model.Base;
using Myzj.OPC.UI.Model.CommentsManage;
using Myzj.OPC.UI.Portal.Models;
using Myzj.OPC.UI.ServiceClient;

namespace Myzj.OPC.UI.Portal.Controllers
{
	public class CommentsManageController : BaseController
    {
		// GET: /CommentsManage/
		/// <summary>
		/// 审核列表
		/// </summary>
		/// <param name="search">请求参数</param>
		/// <param name="pids">评论id（可为多个）</param>
		/// <returns></returns>
		public ActionResult Index(CommentsManageRefer search,string pids)
		{
			var result = new CommentsManageRefer();
			if (!string.IsNullOrEmpty(pids))
			{
				search.CommentDetail.CommentIds = pids;
				result = CommentManageClient.Instance.QueryCommentsPageList(search);
			}
			else
			{
				//会员昵称
				if (!string.IsNullOrEmpty(search.CommentDetail.ShowNickName))
				{
					search.CommentDetail.ShowNickName = search.CommentDetail.ShowNickName.Trim();
				}
				//商品
				if (!string.IsNullOrEmpty(search.CommentDetail.ProductCondition))
				{
					search.CommentDetail.ProductCondition = search.CommentDetail.ProductCondition.Trim();
				}
				//评论内容
				if (!string.IsNullOrEmpty(search.CommentDetail.ContentInfo))
				{
					search.CommentDetail.ContentInfo = search.CommentDetail.ContentInfo.Trim();
				}
				//审核人
				if (!string.IsNullOrEmpty(search.CommentDetail.CheckUser))
				{
					search.CommentDetail.CheckUser = search.CommentDetail.CheckUser.Trim();
				}
				//回复人
				if (!string.IsNullOrEmpty(search.CommentDetail.ReplyUser))
				{
					search.CommentDetail.ReplyUser = search.CommentDetail.ReplyUser.Trim();
				}
				result = CommentManageClient.Instance.QueryCommentsPageList(search);
			}
			ViewBag.Sum = search.PageSize;
			return View(result);
		}

		/// <summary>
		/// 审核评论
		/// </summary>
		/// <param name="commonAuditparam"></param>
		/// <returns></returns>
		public JsonResult AuditCommnetManage(CommonAuditParam commonAuditparam)
		{
			var result = new BaseResponse();
			string checkStr = commonAuditparam.CheJsonStr;
			string checkInfo = commonAuditparam.RefusedReason;
			int checkUserId = UserInfo.UserSysNo;

			var res = CommentManageClient.Instance.AuditCommentManage(checkStr, checkInfo, checkUserId);
			result.DoFlag = res.DoFlag;
			result.DoResult = res.DoResult;
			return Json(result, JsonRequestBehavior.AllowGet);
		}

		/// <summary>
		/// 批量加精
		/// </summary>
		/// <param name="cids"></param>
		/// <param name="uncids"></param>
		/// <returns></returns>
		public JsonResult SetEssence(string cids, string uncids)
		{
			var result = new BaseResponse() {DoFlag = false, DoResult = "加精设置失败"};
			var implresult = CommentManageClient.Instance.SetEssence(cids, uncids);
			if (implresult.DoFlag)
			{
				result.DoFlag = true;
				result.DoResult = implresult.DoResult;
			}
			return Json(result, JsonRequestBehavior.AllowGet);
		}

		/// <summary>
		/// 回复人
		/// </summary>
		/// <param name="rid">评论id</param>
		/// <param name="replyinfo">回复内容</param>
		/// <returns></returns>
		public JsonResult ReplyComment(int rid, string replyinfo)
		{
			var result = new BaseResponse() { DoFlag = false, DoResult = "回复失败" };
			int replyUserId = UserInfo.UserSysNo;
			var implresult = CommentManageClient.Instance.ReplyComment(rid, replyinfo, replyUserId);
			if (implresult.DoFlag)
			{
				result.DoFlag = true;
				result.DoResult = implresult.DoResult;
			}
			return Json(result, JsonRequestBehavior.AllowGet);
		}

		//Excel导入视图页
		public ActionResult ImportCommnets()
		{
			return View();
		}

		//Excel导入模板下载
		public FileResult GetFile()
		{
			const string url = "~/TempExcel/商品评论模板.xls";
			var fileName = Server.MapPath(url);
			var name = Path.GetFileName(fileName);
			return File(fileName, "application/ms-excel", Url.Encode(name));
		}

		public ActionResult ImportCommentsFile()
		{
			var ptcp = new BaseResponse { DoFlag = true, DoResult = "Success" };
			try
			{
				FileUploader uploader = new FileUploader("~/Upload");
				uploader.SetExtensionLimit(".xls|.xlsx");
				string error;
				List<string> filenames=uploader.Process(this.Request, out error);
				string fileName = filenames.FirstOrDefault();
				if (!string.IsNullOrEmpty(error))
				{
					ptcp.DoFlag = false;
					ptcp.DoResult = error;
				}
				else
				{
					fileName = Path.GetFileName(fileName);
					string fullPath = Path.Combine(Server.MapPath("~/Upload"), fileName);
					//将excel数据导入到列表中
					ImportExcelToList import = new ImportExcelToList();
					MessageList errors = new MessageList();
					//获取表数据
					ImportToListResult importedResult = import.DoImport(fullPath);
					if (importedResult.Result.IsSuccess)
					{
						//获取验证返回的错误信息
						errors.Merge(DoValidData(importedResult.Data.ImportedBody));
						if (errors.Messages != null && errors.Messages.Any())
						{
							ptcp.DoFlag = false;
							ViewBag.ErrorMsgs = errors.Messages.Select(s => s.Message).ToList();
						}
						else
						{
							//执行导入
							//Stopwatch during = new Stopwatch();
							//during.Start();
							//int success = DoImport(importedResult.Data.ImportedHeader, importedResult.Data.ImportedBody);
							//during.Stop();
							//string info = string.Format("导入成功!一共导入:{0}条记录,耗时{1}秒", success, during.Elapsed.TotalSeconds);
							
						}
						
					}
					else
					{
						ptcp.DoFlag = false;
						ptcp.DoResult = importedResult.Result.Error;
					
					}
				}
			}
			catch (Exception ex)
			{
				ptcp.DoFlag = false;
				ptcp.DoResult = "导入异常";
			}

			ViewBag.Result = Json(ptcp, JsonRequestBehavior.AllowGet);
			return View("ImportCommnets");
		}



		/// <summary>
		/// 校验导入Excel表中数据有效性
		/// </summary>
		/// <param name="bodyData">表数据</param>
		/// <returns></returns>
		private MessageList DoValidData(List<List<object>> bodyData)
		{
			MessageList rtn = new MessageList();
			for (int i = 0; i < bodyData.Count; i++)
			{
				int no = i + 1;
				var one = bodyData[i];
				//校验商品id为int且不为空
				if (one[0] != null)
				{
					int productid = 0;
					bool tointproductid = int.TryParse(one[0].ToString(),out productid);
					if (tointproductid == false)
					{
						rtn.Add(string.Format("第{0}行:填写的商品id不是数字", no));
						continue;
					}
				}
				else
				{
					rtn.Add(string.Format("第{0}行:商品id未填写", no));
					continue;
				}
				//校验评分等级为1到5的数字且非空
				if (one[2] != null)
				{
					int score = 0;
					bool tointscore = int.TryParse(one[2].ToString(), out score);
					if (tointscore == false)
					{
						rtn.Add(string.Format("第{0}行:填写的商品评分不是数字", no));
						continue;
					}
					if (score < 1 || score > 5)
					{
						rtn.Add(string.Format("第{0}行:填写的商品评分等级数字不在1到5范围内", no));
						continue;
					}
				}
				else
				{
					rtn.Add(string.Format("第{0}行:商品评分等级未填写", no));
					continue;
				}
				//如果填写手机号，校验手机号格式
				if (!string.IsNullOrEmpty(one[3].ToString()))
				{
					//@"^1(3[4-9]|5[012789]|8[78])\d{8}$";  匹配移动手机号 
					//@"^18[09]\d{8}$";    匹配电信手机号 
					//@"^1(3[0-2]|5[56]|8[56])\d{8}$";    匹配联通手机号 
					//@"^1[35]3\d{8}$"; 匹配CDMA手机号 
					if (!Regex.IsMatch(one[3].ToString(), @"^1(3[4-9]|5[012789]|8[78])\d{8}$") || !Regex.IsMatch(one[3].ToString(), @"^18[09]\d{8}$") || !Regex.IsMatch(one[3].ToString(), @"^1(3[0-2]|5[56]|8[56])\d{8}$") || !Regex.IsMatch(one[3].ToString(), @"^1[35]3\d{8}$"))
					{
						rtn.Add(string.Format("第{0}行:手机号码格式不正确", no));
						continue;
					}
				}

				//如果填写邮箱，校验邮箱格式
				if (!string.IsNullOrEmpty(one[5].ToString()))
				{
					if (!Regex.IsMatch(one[5].ToString(), @"^([/w-/.]+)@((/[[0-9]{1,3}/.[0-9]{1,3}/.[0-9]{1,3}/.)|(([/w-]+/.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(/]?)$"))
					{
						rtn.Add(string.Format("第{0}行:邮箱格式不正确", no));
						continue;
					}
				}
			}
			return rtn;
		}




		///// <summary>
		///// 执行导入
		///// </summary>
		///// <param name="headerDatas">表头</param>
		///// <param name="bodyData">表体</param>
		///// <returns></returns>
		//public int DoImport(List<string> headerDatas, List<List<object>> bodyData)
		//{
		//	int successRec = 0;
		//	foreach (var row in bodyData)   //row表示一行的数据集合
		//	{
		//		if (row == null || row[0] == null) continue;  //如果Excel表中某行或某行的商品id为空就跳过

		//		int productid = 0;
		//		bool tointproductid = int.TryParse(row[0].ToString(), out productid);

		//		string contentInfo = row[1].ToString().Trim();  //评价内容

		//		int score = 0;
		//		bool tointscore = int.TryParse(row[2].ToString(), out score);


			
		//		successRec++;

		//	}
		//	return successRec;
		//}

    }
}
