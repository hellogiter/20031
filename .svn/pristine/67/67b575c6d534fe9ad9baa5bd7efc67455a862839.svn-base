using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Myzj.BS.ServiceModel.Logistics;
using Myzj.OPC.UI.Model.ExpressModel;

namespace Myzj.OPC.UI.ServiceClient
{
    public class ExpressClient : BaseService
    {
        #region 单例
        private ExpressClient()
        {
        }
        private static readonly object Lockobj = new object();
        private static ExpressClient _instance;
        public static ExpressClient Instance
        {
            get
            {
                if (_instance == null)
                {
                    lock (Lockobj)
                    {
                        if (_instance == null)
                        {
                            _instance = new ExpressClient();
                        }
                    }
                }
                return _instance;
            }
        }
        #endregion

        #region 物流信息管理
        //查询列表
        public ExpressInfoRefer QueryExpressInfoPageList(ExpressInfoRefer refer)
        {
            var ret = new ExpressInfoRefer();
            var search = refer.Search;
            var req = Mapper.Map<ExpressInfoSearchModel, EC_QueryExpressInfoList>(search);
            req.PageIndex = refer.PageIndex;
            req.PageSize = 30;
            var response = BSClient.Send<EC_QueryExpressInfoListResponse>(req);
            if (response.DoFlag && response.Dtos != null && response.Dtos.Any())
            {
                ret.List = Mapper.MappGereric<EC_QueryExpressInfoListDto, ExpressInfoModelExt>(response.Dtos);
                ret.PageIndex = response.PageIndex;
                ret.PageSize = response.PageSize;
                ret.Total = response.Total;
            }
            return ret;
        }

        //查询单个
        public ExpressInfoModel QueryExpressInfoEntity(int SysNo, string OrderCode)
        {
            var model = new ExpressInfoModel();
            var response = BSClient.Send<EC_QueryExpressInfoEntityResponse>(new EC_QueryExpressInfoEntity
                {
                    SysNo = SysNo,
                    OrderCode = OrderCode
                });
            if (response.DoFlag && response.Dto != null)
            {
                model = Mapper.Map<EC_QueryExpressInfoListDto, ExpressInfoModel>(response.Dto);
            }
            return model;
        }

        //修改基本信息(已归档数据无法修改)-可以改为已签收
        public bool UpdateExpressInfo(ExpressInfoModel model)
        {
            return BSClient.Send<EC_ExpressInfoUpdateResponse>(Mapper.Map<ExpressInfoModel, EC_ExpressInfoUpdate>(model))
                        .DoFlag;
        }

        ////新增-运单手动导入
        //public bool AddExpressInfo(ExpressInfoModel model)
        //{
        //    return BSClient.Send<EC_ExpressInfoAddResponse>(Mapper.Map<ExpressInfoModel, EC_ExpressInfoAdd>(model)).DoFlag;
        //}

        //查询数据订阅记录
        public List<ExpressSubscribeRecordModel> QuerySubScribeRecord(string orderCode)
        {
            var ret = new List<ExpressSubscribeRecordModel>();
            var response = BSClient.Send<EC_QueryExpressSubscribeRecordResponse>(new EC_QueryExpressSubscribeRecord
                {
                    OrderCode = orderCode
                });
            if (response.DoFlag && response.Dtos != null && response.Dtos.Any())
            {
                ret = Mapper.MappGereric<EC_QueryExpressSubscribeRecordDto, ExpressSubscribeRecordModel>(response.Dtos);
            }
            return ret;
        }

        //查询自接记录
        public ExpressSelfAccessRefer QuerySelfAccessPageList(ExpressSelfAccessRefer refer)
        {
            var req = refer.Search;
            var ret = new ExpressSelfAccessRefer();
            var response = BSClient.Send<EC_QueryExpressSelfAccessListResponse>(new EC_QueryExpressSelfAccessList
                {
                    OrderCode = req.OrderCode,
                    StartTime = req.StartTime,
                    EndTime = req.EndTime,
                    PageIndex = refer.PageIndex,
                    PageSize = refer.PageSize
                });
            ret.List = Mapper.MappGereric<EC_QueryExpressSelfAccessListDto, ExpressSelfAccessModel>(response.Dtos);
            ret.PageIndex = response.PageIndex;
            ret.PageSize = response.PageSize;
            ret.Total = response.Total;
            return ret;
        }

        ////批量重新订阅(重推-重开)(修改物流中间表实现)
        //public bool SetSubscribeRetry(int OrderCode)
        //{
        //    return BSClient.Send<EC_SetSubscribeRetryResponse>(new EC_SetSubscribeRetry
        //        {
        //            OrderCode = OrderCode
        //        }).DoFlag;
        //}

        //刷新查询缓存
        public bool RefreshExpressCache(string ordercode)
        {
            return BSClient.Send<EC_RefreshExpressCacheResponse>(new EC_RefreshExpressCache
                {
                    OrderCode = ordercode
                }).DoFlag;
        }

        #endregion

        #region 配送商管理

        /// <summary>
        /// 查询配送商列表
        /// </summary>
        /// <param name="refer"></param>
        /// <returns></returns>
        public ExpressCompanyRefer QueryCompanPageList(ExpressCompanyRefer refer)
        {
            var req = refer.Search;
            var ret = new ExpressCompanyRefer();
            var response = BSClient.Send<EC_QueryCompanyListResponse>(new EC_QueryCompanyList
                 {
                     LogiscticId = req.LogiscticId,
                     LogiscticCompany = req.LogiscticCompany,
                     LogiscticCompanyName = req.LogiscticCompanyName,
                     OfenFlag = req.OfenFlag,
                     SetAccessMode = req.SetAccessMode,
                     PageIndex = refer.PageIndex,
                     PageSize = refer.PageSize,
                     IsDel = req.IsDel
                 });
            ret.List = Mapper.MappGereric<EC_QueryCompanyDto, CompanyModel>(response.Dtos);
            ret.PageIndex = response.PageIndex;
            ret.PageSize = response.PageSize;
            ret.Total = response.Total;
            return ret;
        }

        /// <summary>
        /// 查询单个配送商
        /// </summary>
        /// <param name="SysNo"></param>
        /// <returns></returns>
        public CompanyModel QueryCompanyEntity(int SysNo)
        {
            var model = new CompanyModel();
            var response = BSClient.Send<EC_QueryCompanyEntityResponse>(new EC_QueryCompanyEntity
                {
                    SysNo = SysNo
                });
            if (response.DoFlag && response.Dto != null)
            {
                model = Mapper.Map<EC_QueryCompanyDto, CompanyModel>(response.Dto);
            }
            return model;
        }

        /// <summary>
        /// 修改配送商
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public bool UpdateCompany(CompanyModel model)
        {
            return BSClient.Send<EC_CompanyUpdateResponse>(Mapper.Map<CompanyModel, EC_CompanyUpdate>(model)).DoFlag;
        }

        /// <summary>
        /// 新增配送商
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public bool AddCompany(CompanyModel model)
        {
            return BSClient.Send<EC_CompanyAddResponse>(Mapper.Map<CompanyModel, EC_CompanyAdd>(model)).DoFlag;
        }

        /// <summary>
        /// 查询配送商
        /// </summary>
        /// <param name="refer"></param>
        /// <returns></returns>
        public ExpressAcessConfigRefer QueryExpressAccessConfigPageList(ExpressAcessConfigRefer refer)
        {
            var req = refer.Search;
            var ret = new ExpressAcessConfigRefer();
            var response = BSClient.Send<EC_SelfAccessConfigListResponse>(new EC_SelfAccessConfigList { });
            ret.List = Mapper.MappGereric<EC_SelfAccessConfigListDto, SelfAccessConfigModel>(response.Dtos);
            return ret;
        }

        /// <summary>
        /// 修改配送商
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public bool UpdateExpressAccessConfig(SelfAccessConfigModel model)
        {
            return BSClient.Send<EC_SelfAccessConfigUpdateResponse>(Mapper.Map<SelfAccessConfigModel, EC_SelfAccessConfigUpdate>(model)).DoFlag;
        }

        /// <summary>
        /// 新增配送商
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public EC_SelfAccessConfigAddResponse AddExpressAccessConfig(SelfAccessConfigModel model)
        {
            return BSClient.Send<EC_SelfAccessConfigAddResponse>(Mapper.Map<SelfAccessConfigModel, EC_SelfAccessConfigAdd>(model));
        }
        //自接频率列表查询
        public List<SelfAccessConfigModel> QuerySelfAccessConfigList(string LogiscticId)
        {
            var model = new List<SelfAccessConfigModel>();
            var response = BSClient.Send<EC_SelfAccessConfigListResponse>(new EC_SelfAccessConfigList
            {
                LogiscticId = LogiscticId
            });
            if (response != null && response.DoFlag && response.Dtos.Any())
            {
                model = Mapper.MappGereric<EC_SelfAccessConfigListDto, SelfAccessConfigModel>(response.Dtos);
            }
            return model;
        }

        //自接频率修改
        public bool UpdateSelfAccessConfig(SelfAccessConfigModel model)
        {
            return BSClient.Send<EC_SelfAccessConfigUpdateResponse>(Mapper.Map<SelfAccessConfigModel, EC_SelfAccessConfigUpdate>(model)).DoFlag;
        }
        #endregion

        #region 国际物流管理
        /// <summary>
        /// 查询国际物流
        /// </summary>
        /// <param name="refer"></param>
        /// <returns></returns>
        public ExpressGuojiRefer QueryGuojiPageList(ExpressGuojiRefer refer)
        {
            var req = refer.Search;
            var ret = new ExpressGuojiRefer();
            var response = BSClient.Send<EC_QueryGuojiListReponse>(new EC_QueryGuojiList
            {
                PageIndex = refer.PageIndex,
                PageSize = refer.PageSize,
                OrderCode = req.OrderCode
            });
            ret.List = Mapper.MappGereric<EC_QueryGuojiListDto, InterNationalModel>(response.Dtos);
            ret.PageIndex = response.PageIndex;
            ret.PageSize = response.PageSize;
            ret.Total = response.Total;
            return ret;
        }

        #endregion

        #region 查询对账单
        /// <summary>
        /// 对账单查询
        /// </summary>
        /// <param name="StartTime"></param>
        /// <param name="EndTime"></param>
        /// <returns></returns>
        public int QueryAccountStateMent(DateTime StartTime, DateTime EndTime)
        {
            return BSClient.Send<EC_QueryAccountStateMentResponse>(new
                EC_QueryAccountStateMent
                {
                    StartTime = StartTime,
                    EndTime = EndTime
                }).Sum;
        }

        #endregion

        #region 查询日志
        /// <summary>
        /// 查询日志
        /// </summary>
        /// <param name="refer"></param>
        /// <returns></returns>
        public ExpressLogRefer QueryLogPageList(ExpressLogRefer refer)
        {
            var req = refer.Search;
            var ret = new ExpressLogRefer();
            var response = BSClient.Send<EC_QueryLogPageListResponse>(new EC_QueryLogPageList
            {
                PageIndex = refer.PageIndex,
                PageSize = refer.PageSize,
                OrderCode = req.OrderCode
            });
            ret.List = Mapper.MappGereric<EC_LogModelDto, ExpressLogModel>(response.Dtos);
            ret.PageIndex = response.PageIndex;
            ret.PageSize = response.PageSize;
            ret.Total = response.Total;
            return ret;
        }
        #endregion

        #region 订单状态管理

        /// <summary>
        /// 查询订单状态扭转
        /// </summary>
        /// <param name="refer"></param>
        /// <returns></returns>
        public ExpressOrderStatusRefer QueryOrderStatusPageList(ExpressOrderStatusRefer refer)
        {
            var req = refer.Search;
            var ret = new ExpressOrderStatusRefer();
            var response = BSClient.Send<EC_QueryOrderStatusPageListResponse>(new EC_QueryOrderStatusPageList
            {
                PageIndex = refer.PageIndex,
                PageSize = refer.PageSize,
                OrderCode = req.OrderCode
            });
            ret.List = Mapper.MappGereric<EC_QueryOrderStatusPageListDto, OrderStatusModel>(response.Dtos);
            ret.PageIndex = response.PageIndex;
            ret.PageSize = response.PageSize;
            ret.Total = response.Total;
            return ret;
        }


        //查询订单状态配置列表
        public ExpressOrderStatusConfigRefer QueryOrderStatusConfigList(ExpressOrderStatusConfigRefer refer)
        {
            var ret = new ExpressOrderStatusConfigRefer();
            var response = BSClient.Send<EC_QueryOrderStatusConfigListResponse>(new EC_QueryOrderStatusConfigList
            {
                OrderType = refer.Search.OrderType,
                OrderStatus = refer.Search.OrderStatus
            });
            if (response.DoFlag && response.Dtos.Any())
            {
                ret.List = Mapper.MappGereric<EC_QueryOrderStatusConfigListDto, OrderStatusConfigModel>(response.Dtos);
            }
            return ret;
        }

        //查询单个订单状态配置
        public OrderStatusConfigModel QueryOrderStatusConfigEntity(int SysNo)
        {
            var model = new OrderStatusConfigModel();
            var response = BSClient.Send<EC_QueryOrderStatusConfigEntityResponse>(new EC_QueryOrderStatusConfigEntity
            {
                SysNo = SysNo
            });
            if (response.DoFlag && response.Dto != null)
            {
                model = Mapper.Map<EC_QueryOrderStatusConfigListDto, OrderStatusConfigModel>(response.Dto);
            }
            return model;
        }

        //修改订单状态配置
        public bool UpdateOrderStatusConfig(OrderStatusConfigModel model)
        {
            return BSClient.Send<EC_OrderStatusConfigUpdateResponse>(Mapper.Map<OrderStatusConfigModel, EC_OrderStatusConfigUpdate>(model)).DoFlag;
        }

        //新增订单状态配置
        public EC_OrderStatusConfigAddResponse AddOrderStatusConfig(OrderStatusConfigModel model)
        {
            return BSClient.Send<EC_OrderStatusConfigAddResponse>(Mapper.Map<OrderStatusConfigModel, EC_OrderStatusConfigAdd>(model));
        }

        #endregion

    }
}
